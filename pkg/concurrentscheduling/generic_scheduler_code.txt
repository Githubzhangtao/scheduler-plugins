# kubernetes1.19.0，pkg/scheduler/core/generic_scheduler.go   Schedule方法，完成concurrentscheduling的功能

func (g *genericScheduler) Schedule(ctx context.Context, prof *profile.Profile, state *framework.CycleState, pod *v1.Pod) (result ScheduleResult, err error) {
	trace := utiltrace.New("Scheduling", utiltrace.Field{Key: "namespace", Value: pod.Namespace}, utiltrace.Field{Key: "name", Value: pod.Name})
	defer trace.LogIfLong(100 * time.Millisecond)

	if err := podPassesBasicChecks(pod, g.pvcLister); err != nil {
		return result, err
	}
	trace.Step("Basic checks done")

	if err := g.snapshot(); err != nil {
		return result, err
	}
	trace.Step("Snapshotting scheduler cache and node infos done")

	if g.nodeInfoSnapshot.NumNodes() == 0 {
		return result, ErrNoNodesAvailable
	}

	startPredicateEvalTime := time.Now()
	feasibleNodes, filteredNodesStatuses, err := g.findNodesThatFitPod(ctx, prof, state, pod)
	if err != nil {
		return result, err
	}
	trace.Step("Computing predicates done")

	if len(feasibleNodes) == 0 {
		return result, &FitError{
			Pod:                   pod,
			NumAllNodes:           g.nodeInfoSnapshot.NumNodes(),
			FilteredNodesStatuses: filteredNodesStatuses,
		}
	}
	klog.V(1).Infof("pod:%v,预选耗时：%v毫秒",pod.Name,metrics.SinceInSeconds(startPredicateEvalTime)*1000)

	metrics.DeprecatedSchedulingAlgorithmPredicateEvaluationSecondsDuration.Observe(metrics.SinceInSeconds(startPredicateEvalTime))
	metrics.DeprecatedSchedulingDuration.WithLabelValues(metrics.PredicateEvaluation).Observe(metrics.SinceInSeconds(startPredicateEvalTime))

	startPriorityEvalTime := time.Now()
	// When only one node after predicate, just use it.
	if len(feasibleNodes) == 1 {
		metrics.DeprecatedSchedulingAlgorithmPriorityEvaluationSecondsDuration.Observe(metrics.SinceInSeconds(startPriorityEvalTime))
		return ScheduleResult{
			SuggestedHost:  feasibleNodes[0].Name,
			EvaluatedNodes: 1 + len(filteredNodesStatuses),
			FeasibleNodes:  1,
		}, nil
	}

	priorityList, err := g.prioritizeNodes(ctx, prof, state, pod, feasibleNodes)
	//fmt.Println("----------------------------------------------------打分------------------------------------------------------------------------")
	//fmt.Printf("排序前：%v", priorityList)
	//concurrentInstance := concurrentscheduling.GetConcurrentScheduler()
	//scoreList := make(framework.NodeScoreList, len(priorityList))
	//copy(scoreList, priorityList)
	//sort.Sort(scoreList)
	////fmt.Printf("排序后：%v", scoreList)
	//for _, s := range scoreList {
	//	concurrentInstance.Queue.Add(s)
	//}
	//fmt.Printf("得分队列:%v", scoreList)
	//thePodHost, _ := concurrentInstance.Queue.Get()
	//host := thePodHost.(framework.NodeScore).Name
	//fmt.Printf("thePod选择的节点为%v", host)
	//fmt.Println("----------------------------------------------------侵入结束-----------------------------------------------------------------------")

	if err != nil {
		return result, err
	}
	klog.V(1).Infof("pod:%v,优选耗时：%v毫秒",pod.Name,metrics.SinceInSeconds(startPriorityEvalTime)*1000)

	metrics.DeprecatedSchedulingAlgorithmPriorityEvaluationSecondsDuration.Observe(metrics.SinceInSeconds(startPriorityEvalTime))
	metrics.DeprecatedSchedulingDuration.WithLabelValues(metrics.PriorityEvaluation).Observe(metrics.SinceInSeconds(startPriorityEvalTime))

	host, err := g.selectHost(priorityList) // 为我们已经为ThePod分配了节点
	trace.Step("Prioritizing done")

	return ScheduleResult{
		SuggestedHost:  host,
		EvaluatedNodes: len(feasibleNodes) + len(filteredNodesStatuses),
		FeasibleNodes:  len(feasibleNodes),
	}, err
}